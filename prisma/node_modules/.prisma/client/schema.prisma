generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// Add Role enum before the User model
enum Role {
  Developer
  Designer
  ProductManager
  Marketer
  Founder
  Other
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  banner        String?
  accentColor   Int?
  role          Role? // Add role field
  bio           String? // Bio/about text
  twitter       String? // Twitter username
  github        String? // GitHub username
  linkedin      String? // LinkedIn username
  website       String? // Personal website URL
  accounts      Account[]
  sessions      Session[]
  products      Product[] // Relaci√≥n con los productos creados por el usuario
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String   @id @default(cuid())
  problema        String
  solucion        String
  funcionalidades String
  monetizacion    String
  roadmap         String
  tecnologia      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
}
