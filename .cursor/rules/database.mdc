---
description: Activate anything related of Databases
globs: 
alwaysApply: false
---
# Database Guidelines

## Prisma Usage
- Database schema is defined in [prisma/schema.prisma](mdc:prisma/schema.prisma)
- Always use Prisma Client for database operations
- Keep the schema.prisma file up to date with migrations
- Use meaningful model and field names

## Database Operations
- Use Server Actions for all CRUD operations instead of App Router API endpoints
- Implement server actions in the corresponding component's `actions.ts` file
- Use transactions for related operations
- Implement proper error handling
- Avoid N+1 queries by using proper includes
- Use appropriate field types
- Server actions should be typed and validated
- Use 'use server' directive at the top of action files

## Best Practices
- Keep sensitive data encrypted
- Use indexes for frequently queried fields
- Implement soft deletes where appropriate
- Use relations instead of denormalized data
- Always validate input before database operations

## Migrations
- Generate migrations for all schema changes
- Never edit migration files manually
- Test migrations before deploying
- Keep migration names descriptive

## Server Actions Example
```typescript
// actions.ts
'use server'

import { prisma } from '@/lib/prisma'
import { revalidatePath } from 'next/cache'

export async function createItem(data: CreateItemInput) {
  try {
    const item = await prisma.item.create({
      data
    })
    revalidatePath('/items')
    return { success: true, data: item }
  } catch (error) {
    return { success: false, error: 'Failed to create item' }
  }
}
```
